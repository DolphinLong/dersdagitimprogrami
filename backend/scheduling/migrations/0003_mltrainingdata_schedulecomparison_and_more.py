# Generated by Django 5.2.5 on 2025-08-26 21:09

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0002_backupschedule_schedulealternative'),
    ]

    operations = [
        migrations.CreateModel(
            name='MLTrainingData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_teachers', models.IntegerField(help_text='Toplam öğretmen sayısı')),
                ('total_classrooms', models.IntegerField(help_text='Toplam sınıf sayısı')),
                ('total_courses', models.IntegerField(help_text='Toplam ders sayısı')),
                ('total_time_slots', models.IntegerField(help_text='Toplam zaman dilimi sayısı')),
                ('hard_constraints_count', models.IntegerField(help_text='Zorunlu kısıtlama sayısı')),
                ('soft_constraints_count', models.IntegerField(help_text='Tercihli kısıtlama sayısı')),
                ('previous_conflict_rate', models.FloatField(help_text='Önceki çakışma oranı', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('previous_satisfaction_score', models.FloatField(help_text='Önceki memnuniyet skoru', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('optimal_solution_time', models.FloatField(help_text='Optimal çözümü bulma süresi (saniye)')),
                ('solution_quality', models.FloatField(help_text='Çözüm kalitesi (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('algorithm_used', models.CharField(help_text='Kullanılan algoritma', max_length=50)),
                ('trained_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-trained_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Karşılaştırma adı', max_length=100)),
                ('a_better_than_b', models.FloatField(help_text="A'nın B'den daha iyi olma olasılığı (0-1)", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('teacher_preference_a', models.FloatField(help_text="Öğretmenlerin A'yı tercih etme oranı", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('teacher_preference_b', models.FloatField(help_text="Öğretmenlerin B'yi tercih etme oranı", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('student_preference_a', models.FloatField(help_text="Öğrencilerin A'yı tercih etme oranı", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('student_preference_b', models.FloatField(help_text="Öğrencilerin B'yi tercih etme oranı", validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('compared_at', models.DateTimeField(auto_now_add=True)),
                ('schedule_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparison_as_a', to='scheduling.schedule')),
                ('schedule_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparison_as_b', to='scheduling.schedule')),
            ],
            options={
                'ordering': ['-compared_at'],
            },
        ),
        migrations.CreateModel(
            name='SchedulePerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_conflicts', models.IntegerField(default=0)),
                ('teacher_conflicts', models.IntegerField(default=0)),
                ('classroom_conflicts', models.IntegerField(default=0)),
                ('constraint_violations', models.IntegerField(default=0)),
                ('teacher_utilization_rate', models.FloatField(help_text='Öğretmen kullanım oranı (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('classroom_utilization_rate', models.FloatField(help_text='Sınıf kullanım oranı (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('average_teacher_satisfaction', models.FloatField(help_text='Ortalama öğretmen memnuniyeti (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('average_student_satisfaction', models.FloatField(help_text='Ortalama öğrenci memnuniyeti (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('total_cost', models.FloatField(default=0.0, help_text='Toplam maliyet')),
                ('cost_per_class', models.FloatField(default=0.0, help_text='Ders başına ortalama maliyet')),
                ('generation_time', models.FloatField(default=0.0, help_text='Çizelge oluşturma süresi (saniye)')),
                ('optimization_time', models.FloatField(default=0.0, help_text='Optimizasyon süresi (saniye)')),
                ('fitness_score', models.FloatField(default=0.0, help_text='Genetik algoritma fitness skoru')),
                ('solution_stability', models.FloatField(help_text='Çözüm kararlılığı (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='scheduling.schedule')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeacherFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('satisfaction_score', models.IntegerField(help_text='Memnuniyet puanı (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('schedule_clarity', models.IntegerField(help_text='Çizelge açıklığı (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('time_preference_match', models.IntegerField(help_text='Zaman tercihleri uyumu (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('workload_balance', models.IntegerField(help_text='İş yükü dengesi (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('comments', models.TextField(blank=True, help_text='Açık geri bildirim')),
                ('suggestions', models.TextField(blank=True, help_text='Öneriler')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_feedbacks', to='scheduling.schedule')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='scheduling.teacher')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('teacher', 'schedule')},
            },
        ),
    ]
