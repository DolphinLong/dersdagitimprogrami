#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Teacher Availability Checking in Real Time
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db_manager import DatabaseManager

def main():
    """Test teacher availability checking in detail"""
    print("üß™ √ñƒûRETMEN UYGUNLUK KONTROL√ú TEST EDƒ∞Lƒ∞YOR")
    print("="*60)
    
    db_manager = DatabaseManager()
    
    # Get all teachers
    teachers = db_manager.get_all_teachers()
    print(f"üìä Toplam √∂ƒüretmen sayƒ±sƒ±: {len(teachers)}")
    
    # Test each teacher's availability
    print(f"\nüîç Her √∂ƒüretmenin uygunluƒüunu test ediyoruz...")
    
    for teacher in teachers:
        print(f"\nüìã {teacher.name} ({teacher.subject}):")
        
        # Get availability data
        availability = db_manager.get_teacher_availability(teacher.teacher_id)
        print(f"   Veritabanƒ±nda {len(availability)} uygunluk kaydƒ± var")
        
        # Test each day and slot
        available_count = 0
        unavailable_count = 0
        
        for day in range(5):  # Pazartesi-Cuma
            day_name = ["Pazartesi", "Salƒ±", "√áar≈üamba", "Per≈üembe", "Cuma"][day]
            print(f"   {day_name}:")
            
            for time_slot in range(8):  # 8 saat
                is_available = db_manager.is_teacher_available(teacher.teacher_id, day, time_slot)
                status = "‚úÖ" if is_available else "‚ùå"
                print(f"      Slot {time_slot+1}: {status}")
                
                if is_available:
                    available_count += 1
                else:
                    unavailable_count += 1
        
        print(f"   üìä √ñzet: {available_count} m√ºsait, {unavailable_count} m√ºsait deƒüil")
        
        # Show raw availability data
        if availability:
            print(f"   üìã Ham veri:")
            for av in availability:
                day_name = ["Pazartesi", "Salƒ±", "√áar≈üamba", "Per≈üembe", "Cuma"][av['day']]
                status = "M√ºsait" if av['is_available'] == 1 else "M√ºsait deƒüil"
                print(f"      {day_name} Slot {av['time_slot']+1}: {status}")
    
    # Test scheduler's availability checking
    print(f"\nüß™ Scheduler'ƒ±n uygunluk kontrol√ºn√º test ediyoruz...")
    
    # Import scheduler
    try:
        from algorithms.scheduler import Scheduler
        scheduler = Scheduler(db_manager)
        
        # Test a specific teacher
        test_teacher = teachers[0] if teachers else None
        if test_teacher:
            print(f"   Test √∂ƒüretmeni: {test_teacher.name}")
            
            # Test scheduler's availability checking
            for day in range(2):  # Test first 2 days
                for time_slot in range(3):  # Test first 3 slots
                    # Check using scheduler's method
                    is_available = db_manager.is_teacher_available(test_teacher.teacher_id, day, time_slot)
                    print(f"      Day {day+1}, Slot {time_slot+1}: {'M√ºsait' if is_available else 'M√ºsait deƒüil'}")
        
    except Exception as e:
        print(f"   ‚ùå Scheduler import hatasƒ±: {e}")
    
    # Test actual scheduling with availability
    print(f"\nüß™ Ger√ßek program olu≈üturma testi...")
    
    # Get a class and its assignments
    classes = db_manager.get_all_classes()
    if classes:
        test_class = classes[0]
        print(f"   Test sƒ±nƒ±fƒ±: {test_class.name}")
        
        # Get assignments for this class
        assignments = db_manager.get_schedule_by_school_type()
        class_assignments = [a for a in assignments if a.class_id == test_class.class_id]
        
        print(f"   Bu sƒ±nƒ±f i√ßin {len(class_assignments)} ders atamasƒ± var")
        
        # Test scheduling each assignment
        for assignment in class_assignments[:3]:  # Test first 3 assignments
            teacher = db_manager.get_teacher_by_id(assignment.teacher_id)
            lesson = db_manager.get_lesson_by_id(assignment.lesson_id)
            
            if teacher and lesson:
                print(f"   üìù {lesson.name} -> {teacher.name}")
                
                # Check teacher availability for different slots
                available_slots = []
                for day in range(5):
                    for time_slot in range(8):
                        if db_manager.is_teacher_available(teacher.teacher_id, day, time_slot):
                            available_slots.append((day, time_slot))
                
                print(f"      {teacher.name} i√ßin {len(available_slots)} m√ºsait slot var")
                
                if len(available_slots) < 5:
                    print(f"      ‚ö†Ô∏è  Bu √∂ƒüretmen √ßok az m√ºsait slot'a sahip!")
                    print(f"      ƒ∞lk 5 m√ºsait slot:")
                    for i, (day, slot) in enumerate(available_slots[:5]):
                        day_name = ["Pazartesi", "Salƒ±", "√áar≈üamba", "Per≈üembe", "Cuma"][day]
                        print(f"         {day_name} Slot {slot+1}")
    
    print(f"\nüéâ √ñƒüretmen uygunluk testi tamamlandƒ±!")

if __name__ == "__main__":
    main()